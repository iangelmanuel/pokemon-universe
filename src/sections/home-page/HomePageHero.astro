---
import { Meteors } from "@/components/magicui/meteors"
import { buttonVariants } from "@/components/ui-shadcn/button"
---

<section
  class="relative mx-auto mt-20 flex min-h-screen max-w-screen-xl flex-col items-center justify-between border-b p-5 md:mt-0 md:flex-row md:p-0"
>
  <div class="absolute top-0 left-0 z-[-1] h-screen w-full overflow-hidden">
    <Meteors client:load />
  </div>

  <div class="flex flex-col justify-center">
    <div class="max-w-2xl">
      <h1
        class="title-animation font-title text-primary text-7xl text-amber-500 sm:text-8xl"
      >
        Explora. Aprende. Colecciona.
      </h1>

      <span class="subtitle-animation mt-2 block text-xl">
        Una experiencia dinámica para fans que quieren ir más allá de la batalla
        y descubrir todo el universo detrás de cada Pokémon y carta.
      </span>
    </div>

    <div class="btn-animation mt-8 flex flex-col gap-4 sm:flex-row">
      <a
        href="/1"
        class:list={[
          buttonVariants({ variant: "secondary" }),
          "bg-blue-700 text-lg"
        ]}
        >Explora la collección TCG</a
      >

      <a
        href="/pokedex"
        class:list={[
          buttonVariants({ variant: "secondary" }),
          "bg-green-600 text-lg"
        ]}
        >Explora la Pokédex</a
      >
    </div>
  </div>

  <div class="relative">
    <div
      class="absolute top-1/2 left-1/2 size-40 -translate-x-1/2 -translate-y-1/2 rounded-[60px] bg-amber-500/80 blur-3xl"
    >
    </div>
    <canvas
      id="charmander-canvas"
      class="w-full"
    ></canvas>
  </div>
</section>

<script>
  import gsap from "gsap"
  import { SplitText } from "gsap/SplitText"
  import { ScrollTrigger } from "gsap/ScrollTrigger"

  document.addEventListener("astro:page-load", () => {
    gsap.registerPlugin(SplitText, ScrollTrigger)

    SplitText.create(".title-animation", {
      type: "lines",
      onSplit: (self) => {
        return gsap.from(self.lines, {
          duration: 1,
          opacity: 0,
          y: 50,
          stagger: 0.05,
          ease: "power3.out",
          delay: 0.5
        })
      },
      onRevert: (self) => {
        return gsap.to(self.lines, {
          duration: 0.5,
          opacity: 1,
          y: 0,
          stagger: 0.05,
          ease: "power3.out"
        })
      }
    })

    SplitText.create(".subtitle-animation", {
      type: "lines",
      onSplit: (self) => {
        return gsap.from(self.lines, {
          duration: 1,
          opacity: 0,
          y: 50,
          stagger: 0.05,
          ease: "power3.out",
          delay: 0.5
        })
      },
      onRevert: (self) => {
        return gsap.to(self.lines, {
          duration: 0.5,
          opacity: 1,
          y: 0,
          stagger: 0.05,
          ease: "power3.out"
        })
      }
    })

    gsap.utils.toArray(".btn-animation").forEach((btn) => {
      gsap.from(btn as HTMLElement, {
        duration: 1,
        opacity: 0,
        y: 50,
        ease: "power3.out",
        delay: 1.5
      })
    })

    // Charmander Animation
    const canvas = document.getElementById(
      "charmander-canvas"
    ) as HTMLCanvasElement
    const ctx = canvas.getContext("2d")

    canvas.width = 540
    canvas.height = 540

    const TOTAL_FRAMES = 121

    const createURL = (frame: number) => {
      const id = frame.toString().padStart(4, "0")
      return `./assets/img/charmander-animation/${id}.webp`
    }

    const images = Array.from({ length: TOTAL_FRAMES }, (_, i) => {
      const img = new Image()
      img.src = createURL(i)
      img.alt = `Charmander animation #${i}`
      return img
    })

    const charmander = {
      frame: 0
    }

    gsap.to(charmander, {
      frame: TOTAL_FRAMES - 1,
      ease: "none",
      snap: "frame",
      scrollTrigger: {
        scrub: 0.5
      },
      onUpdate: render
    })

    images[0].onload = () => render()

    function render() {
      ctx?.clearRect(0, 0, canvas.width, canvas.height)
      ctx?.drawImage(images[charmander.frame], 0, 0)
    }

    gsap.from(canvas, {
      duration: 1,
      y: 100,
      opacity: 0,
      ease: "power3.out"
    })
  })
</script>
